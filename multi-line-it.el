(defun get-closing-char-from-opening-char (character)
  (cond ((string-equal character "(") ")")
        ((string-equal character "[") "]")
        ((string-equal character "{") "}")))

(defun find-closing-character (character)
  (let ((closing-character (get-closing-char-from-opening-char character)))
    (re-search-forward "[][(){}]")
    (if (not (string-equal closing-character (match-string 0 nil)))
        (progn (find-closing-character (match-string 0 nil))
               (find-closing-character character)))))

(defun get-current-indent ()
  (interactive)
  (let ((pos (point)))
    (forward-line 0)
    (re-search-forward "[\t\ ]*" nil t)
    (goto-char pos)
    (concat (match-string 0 nil) "\t")))

(defun find-opening-char ()
  (interactive)
  (re-search-forward "\\([({[]\\)" nil t)
  (match-string 0 nil))

(defun multi-line (char)
  (re-search-forward "[][,(){}]")
  (cond ((string-equal (match-string 0 nil) char)
         (replace-match (concat "\n" indent (match-string 0 nil))))
        ((member (match-string 0 nil) '("(" "[" "{"))
         (find-closing-character (match-string 0 nil))
         (multi-line char))
        ((string-equal (match-string 0 nil) ",")
         (replace-match (concat "," "\n" indent "\t"))
         (multi-line char))))

(defun multi-line-it ()
  (interactive)
  (let ((indent (get-current-indent))
        (closing-char (get-closing-char-from-opening-char (find-opening-char))))
    (replace-match (concat (match-string 0 nil) "\n" indent "\t"))
    (multi-line closing-char)
    (message (concat indent "a"))))
